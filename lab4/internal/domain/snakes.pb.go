// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: snakes.proto

package domain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Роль узла в топологии связей узлов в пределах игры
type NodeRole int32

const (
	NodeRole_NORMAL NodeRole = 0 // Обычный узел, лист в топологии "звезда"
	NodeRole_MASTER NodeRole = 1 // Главный узел, центр в топологии "звезда"
	NodeRole_DEPUTY NodeRole = 2 // Заместитель главного узла
	NodeRole_VIEWER NodeRole = 3 // Наблюдатель, похож на NORMAL, но не имеет змеи в статусе ALIVE, только получает обновления статуса
)

// Enum value maps for NodeRole.
var (
	NodeRole_name = map[int32]string{
		0: "NORMAL",
		1: "MASTER",
		2: "DEPUTY",
		3: "VIEWER",
	}
	NodeRole_value = map[string]int32{
		"NORMAL": 0,
		"MASTER": 1,
		"DEPUTY": 2,
		"VIEWER": 3,
	}
)

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[0].Descriptor()
}

func (NodeRole) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[0]
}

func (x NodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NodeRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NodeRole(num)
	return nil
}

// Deprecated: Use NodeRole.Descriptor instead.
func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{0}
}

// Тип игрока
type PlayerType int32

const (
	PlayerType_HUMAN PlayerType = 0 // Живой пользователь
	PlayerType_ROBOT PlayerType = 1 // Робот, управляет своей змеёй с помощью алгоритма (это не нужно реализовывать, но предусмотрено в протоколе на будущее)
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		0: "HUMAN",
		1: "ROBOT",
	}
	PlayerType_value = map[string]int32{
		"HUMAN": 0,
		"ROBOT": 1,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[1].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[1]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlayerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlayerType(num)
	return nil
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	Direction_UP    Direction = 1 // Вверх (в отрицательном направлении оси y)
	Direction_DOWN  Direction = 2 // Вниз (в положительном направлении оси y)
	Direction_LEFT  Direction = 3 // Влево (в отрицательном направлении оси x)
	Direction_RIGHT Direction = 4 // Вправо (в положительном направлении оси x)
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		1: "UP",
		2: "DOWN",
		3: "LEFT",
		4: "RIGHT",
	}
	Direction_value = map[string]int32{
		"UP":    1,
		"DOWN":  2,
		"LEFT":  3,
		"RIGHT": 4,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Direction(num)
	return nil
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{2}
}

// Статус змеи в игре
type GameState_Snake_SnakeState int32

const (
	GameState_Snake_ALIVE  GameState_Snake_SnakeState = 0 // Змея управляется игроком
	GameState_Snake_ZOMBIE GameState_Snake_SnakeState = 1 // Змея принадлежала игроку, который вышел из игры, она продолжает движение куда глаза глядят
)

// Enum value maps for GameState_Snake_SnakeState.
var (
	GameState_Snake_SnakeState_name = map[int32]string{
		0: "ALIVE",
		1: "ZOMBIE",
	}
	GameState_Snake_SnakeState_value = map[string]int32{
		"ALIVE":  0,
		"ZOMBIE": 1,
	}
)

func (x GameState_Snake_SnakeState) Enum() *GameState_Snake_SnakeState {
	p := new(GameState_Snake_SnakeState)
	*p = x
	return p
}

func (x GameState_Snake_SnakeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState_Snake_SnakeState) Descriptor() protoreflect.EnumDescriptor {
	return file_snakes_proto_enumTypes[3].Descriptor()
}

func (GameState_Snake_SnakeState) Type() protoreflect.EnumType {
	return &file_snakes_proto_enumTypes[3]
}

func (x GameState_Snake_SnakeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GameState_Snake_SnakeState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GameState_Snake_SnakeState(num)
	return nil
}

// Deprecated: Use GameState_Snake_SnakeState.Descriptor instead.
func (GameState_Snake_SnakeState) EnumDescriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3, 1, 0}
}

// Игрок
type GamePlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`                               // Имя игрока (для отображения в интерфейсе)
	Id            *int32                 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`                                  // Уникальный идентификатор игрока в пределах игры
	IpAddress     *string                `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`    // IPv4 или IPv6 адрес игрока в виде строки. Отсутствует в описании игрока-отправителя сообщения
	Port          *int32                 `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`                              // Порт UDP-сокета игрока. Отсутствует в описании игрока-отправителя сообщения
	Role          *NodeRole              `protobuf:"varint,5,req,name=role,enum=snakes.NodeRole" json:"role,omitempty"`         // Роль узла в топологии
	Type          *PlayerType            `protobuf:"varint,6,opt,name=type,enum=snakes.PlayerType,def=0" json:"type,omitempty"` // Тип игрока
	Score         *int32                 `protobuf:"varint,7,req,name=score" json:"score,omitempty"`                            // Число очков, которые набрал игрок
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GamePlayer fields.
const (
	Default_GamePlayer_Type = PlayerType_HUMAN
)

func (x *GamePlayer) Reset() {
	*x = GamePlayer{}
	mi := &file_snakes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayer) ProtoMessage() {}

func (x *GamePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayer.ProtoReflect.Descriptor instead.
func (*GamePlayer) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{0}
}

func (x *GamePlayer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GamePlayer) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GamePlayer) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *GamePlayer) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *GamePlayer) GetRole() NodeRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return NodeRole_NORMAL
}

func (x *GamePlayer) GetType() PlayerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GamePlayer_Type
}

func (x *GamePlayer) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

// Параметры идущей игры (не должны меняться в процессе игры)
type GameConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         *int32                 `protobuf:"varint,1,opt,name=width,def=40" json:"width,omitempty"`                                       // Ширина поля в клетках (от 10 до 100)
	Height        *int32                 `protobuf:"varint,2,opt,name=height,def=30" json:"height,omitempty"`                                     // Высота поля в клетках (от 10 до 100)
	FoodStatic    *int32                 `protobuf:"varint,3,opt,name=food_static,json=foodStatic,def=1" json:"food_static,omitempty"`            // Количество клеток с едой, независимо от числа игроков (от 0 до 100)
	StateDelayMs  *int32                 `protobuf:"varint,5,opt,name=state_delay_ms,json=stateDelayMs,def=1000" json:"state_delay_ms,omitempty"` // Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 100 до 3000)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GameConfig fields.
const (
	Default_GameConfig_Width        = int32(40)
	Default_GameConfig_Height       = int32(30)
	Default_GameConfig_FoodStatic   = int32(1)
	Default_GameConfig_StateDelayMs = int32(1000)
)

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	mi := &file_snakes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{1}
}

func (x *GameConfig) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return Default_GameConfig_Width
}

func (x *GameConfig) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return Default_GameConfig_Height
}

func (x *GameConfig) GetFoodStatic() int32 {
	if x != nil && x.FoodStatic != nil {
		return *x.FoodStatic
	}
	return Default_GameConfig_FoodStatic
}

func (x *GameConfig) GetStateDelayMs() int32 {
	if x != nil && x.StateDelayMs != nil {
		return *x.StateDelayMs
	}
	return Default_GameConfig_StateDelayMs
}

// Игроки конкретной игры
type GamePlayers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*GamePlayer          `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"` // Список всех игроков
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GamePlayers) Reset() {
	*x = GamePlayers{}
	mi := &file_snakes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayers) ProtoMessage() {}

func (x *GamePlayers) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayers.ProtoReflect.Descriptor instead.
func (*GamePlayers) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{2}
}

func (x *GamePlayers) GetPlayers() []*GamePlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

// Текущее состояние игрового поля
type GameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StateOrder    *int32                 `protobuf:"varint,1,req,name=state_order,json=stateOrder" json:"state_order,omitempty"` // Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
	Snakes        []*GameState_Snake     `protobuf:"bytes,2,rep,name=snakes" json:"snakes,omitempty"`                            // Список змей
	Foods         []*GameState_Coord     `protobuf:"bytes,3,rep,name=foods" json:"foods,omitempty"`                              // Список клеток с едой
	Players       *GamePlayers           `protobuf:"bytes,4,req,name=players" json:"players,omitempty"`                          // Актуальнейший список игроков
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameState) Reset() {
	*x = GameState{}
	mi := &file_snakes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3}
}

func (x *GameState) GetStateOrder() int32 {
	if x != nil && x.StateOrder != nil {
		return *x.StateOrder
	}
	return 0
}

func (x *GameState) GetSnakes() []*GameState_Snake {
	if x != nil {
		return x.Snakes
	}
	return nil
}

func (x *GameState) GetFoods() []*GameState_Coord {
	if x != nil {
		return x.Foods
	}
	return nil
}

func (x *GameState) GetPlayers() *GamePlayers {
	if x != nil {
		return x.Players
	}
	return nil
}

type GameAnnouncement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       *GamePlayers           `protobuf:"bytes,1,req,name=players" json:"players,omitempty"`                       // Текущие игроки
	Config        *GameConfig            `protobuf:"bytes,2,req,name=config" json:"config,omitempty"`                         // Параметры игры
	CanJoin       *bool                  `protobuf:"varint,3,opt,name=can_join,json=canJoin,def=1" json:"can_join,omitempty"` // Можно ли новому игроку присоединиться к игре (есть ли место на поле)
	GameName      *string                `protobuf:"bytes,4,req,name=game_name,json=gameName" json:"game_name,omitempty"`     // Глобально уникальное имя игры, например "my game"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GameAnnouncement fields.
const (
	Default_GameAnnouncement_CanJoin = bool(true)
)

func (x *GameAnnouncement) Reset() {
	*x = GameAnnouncement{}
	mi := &file_snakes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAnnouncement) ProtoMessage() {}

func (x *GameAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAnnouncement.ProtoReflect.Descriptor instead.
func (*GameAnnouncement) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{4}
}

func (x *GameAnnouncement) GetPlayers() *GamePlayers {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameAnnouncement) GetConfig() *GameConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GameAnnouncement) GetCanJoin() bool {
	if x != nil && x.CanJoin != nil {
		return *x.CanJoin
	}
	return Default_GameAnnouncement_CanJoin
}

func (x *GameAnnouncement) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

// Общий формат любого UDP-сообщения
type GameMessage struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	MsgSeq     *int64                 `protobuf:"varint,1,req,name=msg_seq,json=msgSeq" json:"msg_seq,omitempty"`              // Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
	SenderId   *int32                 `protobuf:"varint,10,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`       // ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
	ReceiverId *int32                 `protobuf:"varint,11,opt,name=receiver_id,json=receiverId" json:"receiver_id,omitempty"` // ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
	// Тип сообщения
	//
	// Types that are valid to be assigned to Type:
	//
	//	*GameMessage_Ping
	//	*GameMessage_Steer
	//	*GameMessage_Ack
	//	*GameMessage_State
	//	*GameMessage_Announcement
	//	*GameMessage_Join
	//	*GameMessage_Error
	//	*GameMessage_RoleChange
	//	*GameMessage_Discover
	Type          isGameMessage_Type `protobuf_oneof:"Type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage) Reset() {
	*x = GameMessage{}
	mi := &file_snakes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage) ProtoMessage() {}

func (x *GameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage.ProtoReflect.Descriptor instead.
func (*GameMessage) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5}
}

func (x *GameMessage) GetMsgSeq() int64 {
	if x != nil && x.MsgSeq != nil {
		return *x.MsgSeq
	}
	return 0
}

func (x *GameMessage) GetSenderId() int32 {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return 0
}

func (x *GameMessage) GetReceiverId() int32 {
	if x != nil && x.ReceiverId != nil {
		return *x.ReceiverId
	}
	return 0
}

func (x *GameMessage) GetType() isGameMessage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GameMessage) GetPing() *GameMessage_PingMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *GameMessage) GetSteer() *GameMessage_SteerMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Steer); ok {
			return x.Steer
		}
	}
	return nil
}

func (x *GameMessage) GetAck() *GameMessage_AckMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *GameMessage) GetState() *GameMessage_StateMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_State); ok {
			return x.State
		}
	}
	return nil
}

func (x *GameMessage) GetAnnouncement() *GameMessage_AnnouncementMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Announcement); ok {
			return x.Announcement
		}
	}
	return nil
}

func (x *GameMessage) GetJoin() *GameMessage_JoinMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Join); ok {
			return x.Join
		}
	}
	return nil
}

func (x *GameMessage) GetError() *GameMessage_ErrorMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *GameMessage) GetRoleChange() *GameMessage_RoleChangeMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_RoleChange); ok {
			return x.RoleChange
		}
	}
	return nil
}

func (x *GameMessage) GetDiscover() *GameMessage_DiscoverMsg {
	if x != nil {
		if x, ok := x.Type.(*GameMessage_Discover); ok {
			return x.Discover
		}
	}
	return nil
}

type isGameMessage_Type interface {
	isGameMessage_Type()
}

type GameMessage_Ping struct {
	Ping *GameMessage_PingMsg `protobuf:"bytes,2,opt,name=ping,oneof"`
}

type GameMessage_Steer struct {
	Steer *GameMessage_SteerMsg `protobuf:"bytes,3,opt,name=steer,oneof"`
}

type GameMessage_Ack struct {
	Ack *GameMessage_AckMsg `protobuf:"bytes,4,opt,name=ack,oneof"`
}

type GameMessage_State struct {
	State *GameMessage_StateMsg `protobuf:"bytes,5,opt,name=state,oneof"`
}

type GameMessage_Announcement struct {
	Announcement *GameMessage_AnnouncementMsg `protobuf:"bytes,6,opt,name=announcement,oneof"`
}

type GameMessage_Join struct {
	Join *GameMessage_JoinMsg `protobuf:"bytes,7,opt,name=join,oneof"`
}

type GameMessage_Error struct {
	Error *GameMessage_ErrorMsg `protobuf:"bytes,8,opt,name=error,oneof"`
}

type GameMessage_RoleChange struct {
	RoleChange *GameMessage_RoleChangeMsg `protobuf:"bytes,9,opt,name=role_change,json=roleChange,oneof"`
}

type GameMessage_Discover struct {
	Discover *GameMessage_DiscoverMsg `protobuf:"bytes,12,opt,name=discover,oneof"`
}

func (*GameMessage_Ping) isGameMessage_Type() {}

func (*GameMessage_Steer) isGameMessage_Type() {}

func (*GameMessage_Ack) isGameMessage_Type() {}

func (*GameMessage_State) isGameMessage_Type() {}

func (*GameMessage_Announcement) isGameMessage_Type() {}

func (*GameMessage_Join) isGameMessage_Type() {}

func (*GameMessage_Error) isGameMessage_Type() {}

func (*GameMessage_RoleChange) isGameMessage_Type() {}

func (*GameMessage_Discover) isGameMessage_Type() {}

// Координаты в пределах игрового поля, либо относительное смещение координат.
// Левая верхняя клетка поля имеет координаты (x=0, y=0).
// Направление смещения задаётся знаком чисел.
type GameState_Coord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *int32                 `protobuf:"zigzag32,1,opt,name=x,def=0" json:"x,omitempty"` // По горизонтальной оси, положительное направление - вправо
	Y             *int32                 `protobuf:"zigzag32,2,opt,name=y,def=0" json:"y,omitempty"` // По вертикальной оси, положительное направление - вниз
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GameState_Coord fields.
const (
	Default_GameState_Coord_X = int32(0)
	Default_GameState_Coord_Y = int32(0)
)

func (x *GameState_Coord) Reset() {
	*x = GameState_Coord{}
	mi := &file_snakes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState_Coord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState_Coord) ProtoMessage() {}

func (x *GameState_Coord) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState_Coord.ProtoReflect.Descriptor instead.
func (*GameState_Coord) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GameState_Coord) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return Default_GameState_Coord_X
}

func (x *GameState_Coord) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return Default_GameState_Coord_Y
}

// Змея
type GameState_Snake struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	PlayerId *int32                 `protobuf:"varint,1,req,name=player_id,json=playerId" json:"player_id,omitempty"` // Идентификатор игрока-владельца змеи, см. GamePlayer.id
	// Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
	// Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
	// в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки.
	Points        []*GameState_Coord          `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	State         *GameState_Snake_SnakeState `protobuf:"varint,3,req,name=state,enum=snakes.GameState_Snake_SnakeState,def=0" json:"state,omitempty"`               // статус змеи в игре
	HeadDirection *Direction                  `protobuf:"varint,4,req,name=head_direction,json=headDirection,enum=snakes.Direction" json:"head_direction,omitempty"` // Направление, в котором "повёрнута" голова змейки в текущий момент
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GameState_Snake fields.
const (
	Default_GameState_Snake_State = GameState_Snake_ALIVE
)

func (x *GameState_Snake) Reset() {
	*x = GameState_Snake{}
	mi := &file_snakes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState_Snake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState_Snake) ProtoMessage() {}

func (x *GameState_Snake) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState_Snake.ProtoReflect.Descriptor instead.
func (*GameState_Snake) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{3, 1}
}

func (x *GameState_Snake) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *GameState_Snake) GetPoints() []*GameState_Coord {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *GameState_Snake) GetState() GameState_Snake_SnakeState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_GameState_Snake_State
}

func (x *GameState_Snake) GetHeadDirection() Direction {
	if x != nil && x.HeadDirection != nil {
		return *x.HeadDirection
	}
	return Direction_UP
}

// Ничего не меняем, просто говорим, что мы живы
type GameMessage_PingMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_PingMsg) Reset() {
	*x = GameMessage_PingMsg{}
	mi := &file_snakes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_PingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_PingMsg) ProtoMessage() {}

func (x *GameMessage_PingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_PingMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_PingMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 0}
}

// Не-центральный игрок просит повернуть голову змеи
type GameMessage_SteerMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Direction     *Direction             `protobuf:"varint,1,req,name=direction,enum=snakes.Direction" json:"direction,omitempty"` // Куда повернуть на следующем шаге
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_SteerMsg) Reset() {
	*x = GameMessage_SteerMsg{}
	mi := &file_snakes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_SteerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_SteerMsg) ProtoMessage() {}

func (x *GameMessage_SteerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_SteerMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_SteerMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GameMessage_SteerMsg) GetDirection() Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Direction_UP
}

// Подтверждение сообщения с таким же seq
type GameMessage_AckMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_AckMsg) Reset() {
	*x = GameMessage_AckMsg{}
	mi := &file_snakes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_AckMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_AckMsg) ProtoMessage() {}

func (x *GameMessage_AckMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_AckMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_AckMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 2}
}

// Центральный узел сообщает остальным игрокам состояние игры
type GameMessage_StateMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         *GameState             `protobuf:"bytes,1,req,name=state" json:"state,omitempty"` // Состояние игрового поля
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_StateMsg) Reset() {
	*x = GameMessage_StateMsg{}
	mi := &file_snakes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_StateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_StateMsg) ProtoMessage() {}

func (x *GameMessage_StateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_StateMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_StateMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 3}
}

func (x *GameMessage_StateMsg) GetState() *GameState {
	if x != nil {
		return x.State
	}
	return nil
}

// Уведомление об идущих играх, регулярно отправляется multicast-ом или в ответ на DiscoverMsg
type GameMessage_AnnouncementMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Games         []*GameAnnouncement    `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"` // Идущие игры (в текущей версии задачи тут всегда ровно одна игра)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_AnnouncementMsg) Reset() {
	*x = GameMessage_AnnouncementMsg{}
	mi := &file_snakes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_AnnouncementMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_AnnouncementMsg) ProtoMessage() {}

func (x *GameMessage_AnnouncementMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_AnnouncementMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_AnnouncementMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 4}
}

func (x *GameMessage_AnnouncementMsg) GetGames() []*GameAnnouncement {
	if x != nil {
		return x.Games
	}
	return nil
}

// Запрос информации об идущих играх
type GameMessage_DiscoverMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_DiscoverMsg) Reset() {
	*x = GameMessage_DiscoverMsg{}
	mi := &file_snakes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_DiscoverMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_DiscoverMsg) ProtoMessage() {}

func (x *GameMessage_DiscoverMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_DiscoverMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_DiscoverMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 5}
}

// Новый игрок хочет присоединиться к идущей игре
type GameMessage_JoinMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerType    *PlayerType            `protobuf:"varint,1,opt,name=player_type,json=playerType,enum=snakes.PlayerType,def=0" json:"player_type,omitempty"`  // Тип присоединяющегося игрока
	PlayerName    *string                `protobuf:"bytes,3,req,name=player_name,json=playerName" json:"player_name,omitempty"`                                // Имя игрока
	GameName      *string                `protobuf:"bytes,4,req,name=game_name,json=gameName" json:"game_name,omitempty"`                                      // Глобально уникальное имя игры, к которой хотим присоединиться
	RequestedRole *NodeRole              `protobuf:"varint,5,req,name=requested_role,json=requestedRole,enum=snakes.NodeRole" json:"requested_role,omitempty"` // NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GameMessage_JoinMsg fields.
const (
	Default_GameMessage_JoinMsg_PlayerType = PlayerType_HUMAN
)

func (x *GameMessage_JoinMsg) Reset() {
	*x = GameMessage_JoinMsg{}
	mi := &file_snakes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_JoinMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_JoinMsg) ProtoMessage() {}

func (x *GameMessage_JoinMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_JoinMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_JoinMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 6}
}

func (x *GameMessage_JoinMsg) GetPlayerType() PlayerType {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return Default_GameMessage_JoinMsg_PlayerType
}

func (x *GameMessage_JoinMsg) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *GameMessage_JoinMsg) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *GameMessage_JoinMsg) GetRequestedRole() NodeRole {
	if x != nil && x.RequestedRole != nil {
		return *x.RequestedRole
	}
	return NodeRole_NORMAL
}

// Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
type GameMessage_ErrorMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorMessage  *string                `protobuf:"bytes,1,req,name=error_message,json=errorMessage" json:"error_message,omitempty"` // Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_ErrorMsg) Reset() {
	*x = GameMessage_ErrorMsg{}
	mi := &file_snakes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_ErrorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_ErrorMsg) ProtoMessage() {}

func (x *GameMessage_ErrorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_ErrorMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_ErrorMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 7}
}

func (x *GameMessage_ErrorMsg) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

// Сообщение о смене роли:
// 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
// 2. от осознанно выходящего игрока (sender_role = VIEWER)
// 3. от главного к умершему игроку (receiver_role = VIEWER)
// 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
// 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
type GameMessage_RoleChangeMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderRole    *NodeRole              `protobuf:"varint,1,opt,name=sender_role,json=senderRole,enum=snakes.NodeRole" json:"sender_role,omitempty"`
	ReceiverRole  *NodeRole              `protobuf:"varint,2,opt,name=receiver_role,json=receiverRole,enum=snakes.NodeRole" json:"receiver_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMessage_RoleChangeMsg) Reset() {
	*x = GameMessage_RoleChangeMsg{}
	mi := &file_snakes_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMessage_RoleChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMessage_RoleChangeMsg) ProtoMessage() {}

func (x *GameMessage_RoleChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_snakes_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMessage_RoleChangeMsg.ProtoReflect.Descriptor instead.
func (*GameMessage_RoleChangeMsg) Descriptor() ([]byte, []int) {
	return file_snakes_proto_rawDescGZIP(), []int{5, 8}
}

func (x *GameMessage_RoleChangeMsg) GetSenderRole() NodeRole {
	if x != nil && x.SenderRole != nil {
		return *x.SenderRole
	}
	return NodeRole_NORMAL
}

func (x *GameMessage_RoleChangeMsg) GetReceiverRole() NodeRole {
	if x != nil && x.ReceiverRole != nil {
		return *x.ReceiverRole
	}
	return NodeRole_NORMAL
}

var File_snakes_proto protoreflect.FileDescriptor

const file_snakes_proto_rawDesc = "" +
	"\n" +
	"\fsnakes.proto\x12\x06snakes\"\xce\x01\n" +
	"\n" +
	"GamePlayer\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x02(\x05R\x02id\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x03 \x01(\tR\tipAddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\x12$\n" +
	"\x04role\x18\x05 \x02(\x0e2\x10.snakes.NodeRoleR\x04role\x12-\n" +
	"\x04type\x18\x06 \x01(\x0e2\x12.snakes.PlayerType:\x05HUMANR\x04type\x12\x14\n" +
	"\x05score\x18\a \x02(\x05R\x05score\"\x92\x01\n" +
	"\n" +
	"GameConfig\x12\x18\n" +
	"\x05width\x18\x01 \x01(\x05:\x0240R\x05width\x12\x1a\n" +
	"\x06height\x18\x02 \x01(\x05:\x0230R\x06height\x12\"\n" +
	"\vfood_static\x18\x03 \x01(\x05:\x011R\n" +
	"foodStatic\x12*\n" +
	"\x0estate_delay_ms\x18\x05 \x01(\x05:\x041000R\fstateDelayMs\";\n" +
	"\vGamePlayers\x12,\n" +
	"\aplayers\x18\x01 \x03(\v2\x12.snakes.GamePlayerR\aplayers\"\xde\x03\n" +
	"\tGameState\x12\x1f\n" +
	"\vstate_order\x18\x01 \x02(\x05R\n" +
	"stateOrder\x12/\n" +
	"\x06snakes\x18\x02 \x03(\v2\x17.snakes.GameState.SnakeR\x06snakes\x12-\n" +
	"\x05foods\x18\x03 \x03(\v2\x17.snakes.GameState.CoordR\x05foods\x12-\n" +
	"\aplayers\x18\x04 \x02(\v2\x13.snakes.GamePlayersR\aplayers\x1a)\n" +
	"\x05Coord\x12\x0f\n" +
	"\x01x\x18\x01 \x01(\x11:\x010R\x01x\x12\x0f\n" +
	"\x01y\x18\x02 \x01(\x11:\x010R\x01y\x1a\xf5\x01\n" +
	"\x05Snake\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x02(\x05R\bplayerId\x12/\n" +
	"\x06points\x18\x02 \x03(\v2\x17.snakes.GameState.CoordR\x06points\x12?\n" +
	"\x05state\x18\x03 \x02(\x0e2\".snakes.GameState.Snake.SnakeState:\x05ALIVER\x05state\x128\n" +
	"\x0ehead_direction\x18\x04 \x02(\x0e2\x11.snakes.DirectionR\rheadDirection\"#\n" +
	"\n" +
	"SnakeState\x12\t\n" +
	"\x05ALIVE\x10\x00\x12\n" +
	"\n" +
	"\x06ZOMBIE\x10\x01\"\xab\x01\n" +
	"\x10GameAnnouncement\x12-\n" +
	"\aplayers\x18\x01 \x02(\v2\x13.snakes.GamePlayersR\aplayers\x12*\n" +
	"\x06config\x18\x02 \x02(\v2\x12.snakes.GameConfigR\x06config\x12\x1f\n" +
	"\bcan_join\x18\x03 \x01(\b:\x04trueR\acanJoin\x12\x1b\n" +
	"\tgame_name\x18\x04 \x02(\tR\bgameName\"\xb8\t\n" +
	"\vGameMessage\x12\x17\n" +
	"\amsg_seq\x18\x01 \x02(\x03R\x06msgSeq\x12\x1b\n" +
	"\tsender_id\x18\n" +
	" \x01(\x05R\bsenderId\x12\x1f\n" +
	"\vreceiver_id\x18\v \x01(\x05R\n" +
	"receiverId\x121\n" +
	"\x04ping\x18\x02 \x01(\v2\x1b.snakes.GameMessage.PingMsgH\x00R\x04ping\x124\n" +
	"\x05steer\x18\x03 \x01(\v2\x1c.snakes.GameMessage.SteerMsgH\x00R\x05steer\x12.\n" +
	"\x03ack\x18\x04 \x01(\v2\x1a.snakes.GameMessage.AckMsgH\x00R\x03ack\x124\n" +
	"\x05state\x18\x05 \x01(\v2\x1c.snakes.GameMessage.StateMsgH\x00R\x05state\x12I\n" +
	"\fannouncement\x18\x06 \x01(\v2#.snakes.GameMessage.AnnouncementMsgH\x00R\fannouncement\x121\n" +
	"\x04join\x18\a \x01(\v2\x1b.snakes.GameMessage.JoinMsgH\x00R\x04join\x124\n" +
	"\x05error\x18\b \x01(\v2\x1c.snakes.GameMessage.ErrorMsgH\x00R\x05error\x12D\n" +
	"\vrole_change\x18\t \x01(\v2!.snakes.GameMessage.RoleChangeMsgH\x00R\n" +
	"roleChange\x12=\n" +
	"\bdiscover\x18\f \x01(\v2\x1f.snakes.GameMessage.DiscoverMsgH\x00R\bdiscover\x1a\t\n" +
	"\aPingMsg\x1a;\n" +
	"\bSteerMsg\x12/\n" +
	"\tdirection\x18\x01 \x02(\x0e2\x11.snakes.DirectionR\tdirection\x1a\b\n" +
	"\x06AckMsg\x1a3\n" +
	"\bStateMsg\x12'\n" +
	"\x05state\x18\x01 \x02(\v2\x11.snakes.GameStateR\x05state\x1aA\n" +
	"\x0fAnnouncementMsg\x12.\n" +
	"\x05games\x18\x01 \x03(\v2\x18.snakes.GameAnnouncementR\x05games\x1a\r\n" +
	"\vDiscoverMsg\x1a\xbc\x01\n" +
	"\aJoinMsg\x12:\n" +
	"\vplayer_type\x18\x01 \x01(\x0e2\x12.snakes.PlayerType:\x05HUMANR\n" +
	"playerType\x12\x1f\n" +
	"\vplayer_name\x18\x03 \x02(\tR\n" +
	"playerName\x12\x1b\n" +
	"\tgame_name\x18\x04 \x02(\tR\bgameName\x127\n" +
	"\x0erequested_role\x18\x05 \x02(\x0e2\x10.snakes.NodeRoleR\rrequestedRole\x1a/\n" +
	"\bErrorMsg\x12#\n" +
	"\rerror_message\x18\x01 \x02(\tR\ferrorMessage\x1ay\n" +
	"\rRoleChangeMsg\x121\n" +
	"\vsender_role\x18\x01 \x01(\x0e2\x10.snakes.NodeRoleR\n" +
	"senderRole\x125\n" +
	"\rreceiver_role\x18\x02 \x01(\x0e2\x10.snakes.NodeRoleR\freceiverRoleB\x06\n" +
	"\x04Type*:\n" +
	"\bNodeRole\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\n" +
	"\n" +
	"\x06MASTER\x10\x01\x12\n" +
	"\n" +
	"\x06DEPUTY\x10\x02\x12\n" +
	"\n" +
	"\x06VIEWER\x10\x03*\"\n" +
	"\n" +
	"PlayerType\x12\t\n" +
	"\x05HUMAN\x10\x00\x12\t\n" +
	"\x05ROBOT\x10\x01*2\n" +
	"\tDirection\x12\x06\n" +
	"\x02UP\x10\x01\x12\b\n" +
	"\x04DOWN\x10\x02\x12\b\n" +
	"\x04LEFT\x10\x03\x12\t\n" +
	"\x05RIGHT\x10\x04B\x1bZ\x19./../lab4/internal/domain"

var (
	file_snakes_proto_rawDescOnce sync.Once
	file_snakes_proto_rawDescData []byte
)

func file_snakes_proto_rawDescGZIP() []byte {
	file_snakes_proto_rawDescOnce.Do(func() {
		file_snakes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_snakes_proto_rawDesc), len(file_snakes_proto_rawDesc)))
	})
	return file_snakes_proto_rawDescData
}

var file_snakes_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_snakes_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_snakes_proto_goTypes = []any{
	(NodeRole)(0),                       // 0: snakes.NodeRole
	(PlayerType)(0),                     // 1: snakes.PlayerType
	(Direction)(0),                      // 2: snakes.Direction
	(GameState_Snake_SnakeState)(0),     // 3: snakes.GameState.Snake.SnakeState
	(*GamePlayer)(nil),                  // 4: snakes.GamePlayer
	(*GameConfig)(nil),                  // 5: snakes.GameConfig
	(*GamePlayers)(nil),                 // 6: snakes.GamePlayers
	(*GameState)(nil),                   // 7: snakes.GameState
	(*GameAnnouncement)(nil),            // 8: snakes.GameAnnouncement
	(*GameMessage)(nil),                 // 9: snakes.GameMessage
	(*GameState_Coord)(nil),             // 10: snakes.GameState.Coord
	(*GameState_Snake)(nil),             // 11: snakes.GameState.Snake
	(*GameMessage_PingMsg)(nil),         // 12: snakes.GameMessage.PingMsg
	(*GameMessage_SteerMsg)(nil),        // 13: snakes.GameMessage.SteerMsg
	(*GameMessage_AckMsg)(nil),          // 14: snakes.GameMessage.AckMsg
	(*GameMessage_StateMsg)(nil),        // 15: snakes.GameMessage.StateMsg
	(*GameMessage_AnnouncementMsg)(nil), // 16: snakes.GameMessage.AnnouncementMsg
	(*GameMessage_DiscoverMsg)(nil),     // 17: snakes.GameMessage.DiscoverMsg
	(*GameMessage_JoinMsg)(nil),         // 18: snakes.GameMessage.JoinMsg
	(*GameMessage_ErrorMsg)(nil),        // 19: snakes.GameMessage.ErrorMsg
	(*GameMessage_RoleChangeMsg)(nil),   // 20: snakes.GameMessage.RoleChangeMsg
}
var file_snakes_proto_depIdxs = []int32{
	0,  // 0: snakes.GamePlayer.role:type_name -> snakes.NodeRole
	1,  // 1: snakes.GamePlayer.type:type_name -> snakes.PlayerType
	4,  // 2: snakes.GamePlayers.players:type_name -> snakes.GamePlayer
	11, // 3: snakes.GameState.snakes:type_name -> snakes.GameState.Snake
	10, // 4: snakes.GameState.foods:type_name -> snakes.GameState.Coord
	6,  // 5: snakes.GameState.players:type_name -> snakes.GamePlayers
	6,  // 6: snakes.GameAnnouncement.players:type_name -> snakes.GamePlayers
	5,  // 7: snakes.GameAnnouncement.config:type_name -> snakes.GameConfig
	12, // 8: snakes.GameMessage.ping:type_name -> snakes.GameMessage.PingMsg
	13, // 9: snakes.GameMessage.steer:type_name -> snakes.GameMessage.SteerMsg
	14, // 10: snakes.GameMessage.ack:type_name -> snakes.GameMessage.AckMsg
	15, // 11: snakes.GameMessage.state:type_name -> snakes.GameMessage.StateMsg
	16, // 12: snakes.GameMessage.announcement:type_name -> snakes.GameMessage.AnnouncementMsg
	18, // 13: snakes.GameMessage.join:type_name -> snakes.GameMessage.JoinMsg
	19, // 14: snakes.GameMessage.error:type_name -> snakes.GameMessage.ErrorMsg
	20, // 15: snakes.GameMessage.role_change:type_name -> snakes.GameMessage.RoleChangeMsg
	17, // 16: snakes.GameMessage.discover:type_name -> snakes.GameMessage.DiscoverMsg
	10, // 17: snakes.GameState.Snake.points:type_name -> snakes.GameState.Coord
	3,  // 18: snakes.GameState.Snake.state:type_name -> snakes.GameState.Snake.SnakeState
	2,  // 19: snakes.GameState.Snake.head_direction:type_name -> snakes.Direction
	2,  // 20: snakes.GameMessage.SteerMsg.direction:type_name -> snakes.Direction
	7,  // 21: snakes.GameMessage.StateMsg.state:type_name -> snakes.GameState
	8,  // 22: snakes.GameMessage.AnnouncementMsg.games:type_name -> snakes.GameAnnouncement
	1,  // 23: snakes.GameMessage.JoinMsg.player_type:type_name -> snakes.PlayerType
	0,  // 24: snakes.GameMessage.JoinMsg.requested_role:type_name -> snakes.NodeRole
	0,  // 25: snakes.GameMessage.RoleChangeMsg.sender_role:type_name -> snakes.NodeRole
	0,  // 26: snakes.GameMessage.RoleChangeMsg.receiver_role:type_name -> snakes.NodeRole
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_snakes_proto_init() }
func file_snakes_proto_init() {
	if File_snakes_proto != nil {
		return
	}
	file_snakes_proto_msgTypes[5].OneofWrappers = []any{
		(*GameMessage_Ping)(nil),
		(*GameMessage_Steer)(nil),
		(*GameMessage_Ack)(nil),
		(*GameMessage_State)(nil),
		(*GameMessage_Announcement)(nil),
		(*GameMessage_Join)(nil),
		(*GameMessage_Error)(nil),
		(*GameMessage_RoleChange)(nil),
		(*GameMessage_Discover)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_snakes_proto_rawDesc), len(file_snakes_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snakes_proto_goTypes,
		DependencyIndexes: file_snakes_proto_depIdxs,
		EnumInfos:         file_snakes_proto_enumTypes,
		MessageInfos:      file_snakes_proto_msgTypes,
	}.Build()
	File_snakes_proto = out.File
	file_snakes_proto_goTypes = nil
	file_snakes_proto_depIdxs = nil
}
